/**
 * generated by Xtext 2.37.0
 */
package fr.umontpellier.qcm.formatting2;

import com.google.inject.Inject;
import fr.umontpellier.qcm.services.QCMDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import qcm.Answer;
import qcm.Question;
import qcm.Questionnaire;
import qcm.SingleChoiceQuestion;
import qcm.Tag;

@SuppressWarnings("all")
public class QCMDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private QCMDslGrammarAccess _qCMDslGrammarAccess;

  protected void _format(final Questionnaire questionnaire, @Extension final IFormattableDocument document) {
    EList<Question> _questions = questionnaire.getQuestions();
    for (final Question question : _questions) {
      document.<Question>format(question);
    }
    EList<Tag> _tags = questionnaire.getTags();
    for (final Tag tag : _tags) {
      document.<Tag>format(tag);
    }
  }

  protected void _format(final SingleChoiceQuestion singleChoiceQuestion, @Extension final IFormattableDocument document) {
    EList<Answer> _answers = singleChoiceQuestion.getAnswers();
    for (final Answer answer : _answers) {
      document.<Answer>format(answer);
    }
  }

  @XbaseGenerated
  public void format(final Object singleChoiceQuestion, final IFormattableDocument document) {
    if (singleChoiceQuestion instanceof XtextResource) {
      _format((XtextResource)singleChoiceQuestion, document);
      return;
    } else if (singleChoiceQuestion instanceof SingleChoiceQuestion) {
      _format((SingleChoiceQuestion)singleChoiceQuestion, document);
      return;
    } else if (singleChoiceQuestion instanceof Questionnaire) {
      _format((Questionnaire)singleChoiceQuestion, document);
      return;
    } else if (singleChoiceQuestion instanceof EObject) {
      _format((EObject)singleChoiceQuestion, document);
      return;
    } else if (singleChoiceQuestion == null) {
      _format((Void)null, document);
      return;
    } else if (singleChoiceQuestion != null) {
      _format(singleChoiceQuestion, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(singleChoiceQuestion, document).toString());
    }
  }
}
